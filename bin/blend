#!/usr/bin/env ruby

# Copyright (c) 2008 Chris Griego
#           (c) 2008 Blake Elshire
# 
# Blender is freely distributable under the terms of an MIT-style license.
# For details, see http://www.opensource.org/licenses/mit-license.php

$:.unshift File.join(File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__), *%w[.. lib])
require 'optparse'
require 'front_end_architect/blender'

options = {}

opts = OptionParser.new do |opts|
  opts.on('-h',              '--help',                               "Show this message")                                               {    puts opts; exit 0                                     }
  opts.on('-V',              '--version',                            "Show the version number")                                         {    puts "Front-End Blender v#{Blender::VERSION}"; exit 0 }
  opts.on('-g',              '--generate',              String,      "Generate a stub Blendfile")                                       {    options[:generate]     = true                         }
  opts.on('-f FILE',         '--file FILE',             String,      "Use given Blendfile")                                             {|f| options[:blendfile]    = f                            }
  opts.on('-t TYPE',         '--type TYPE',             [:css, :js], "Select file type to blend (css, js)")                             {|t| options[:file_type]    = t                            }
  opts.on('-c [BUSTER]',     '--cache-buster [BUSTER]', String,      "Append cache busters to URLs in CSS, defaults to timestamps")     {|b| options[:cache_buster] = b.nil? ? :mtime : b          }
  opts.on(                   '--force',                 String,      "Force blending when source files aren't newer than output files") {    options[:force]        = true                         }
  opts.on(                   '--yui=YUIOPTS',           String,      "Pass arguments to YUI Compressor")                                {|o| options[:yuiopts]      = o                            }
  opts.on('-d',              '--data',                  String,      "EXPERIMENTAL Convert url(file.ext) to url(data:) in CSS files")   {    options[:data]         = true                         }
  opts.on('-z',              '--gzip',                  String,      "EXPERIMENTAL Also create gzip output files")                      {    options[:gzip]         = true                         }
  
  opts.parse!(ARGV) rescue return false
end

begin
  blender = FrontEndArchitect::Blender.new(options)
  
  if (options[:generate])
    blender.generate
  else
    blender.blend
  end
rescue Exception => e
  puts e
  exit 1
end
