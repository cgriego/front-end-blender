#!/usr/bin/env ruby

# Copyright (c) 2008 Chris Griego
#           (c) 2008 Blake Elshire
# 
# Blender is freely distributable under the terms of an MIT-style license.
# For details, see http://www.opensource.org/licenses/mit-license.php

$:.unshift File.join(File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__), *%w[.. lib])
require 'optparse'
require 'front_end_architect/blender'

options = {}

opts = OptionParser.new do |opts|
  opts.on('-h',      '--help',                     "Show this message")                                               {    puts opts; exit 0                                     }
  opts.on('-V',      '--version',                  "Show the version number")                                         {    puts "Front-End Blender v#{Blender::VERSION}"; exit 0 }
  opts.on('-f FILE', '--file FILE',   String,      "Use given Blendfile")                                             {|f| options[:blendfile] = f                               }
  opts.on('-t TYPE', '--type TYPE',   [:css, :js], "Select file type to blend (css, js)")                             {|t| options[:file_type] = t                               }
  opts.on('-d',      '--data',        String,      "Convert url(image.ext) to url(data:) in CSS files EXPERIMENTAL")  {    options[:data]      = true                            }
  opts.on(           '--force',       String,      "Force blending when source files aren't newer than output files") {    options[:force]     = true                            }
  opts.on(           '--yui=YUIOPTS', String,      "Pass arguments to YUI Compressor")                                {|o| options[:yuiopts]   = o                               }
  opts.on('-g',      '--generate',    String,      "Generate a stub Blendfile")                                       {    options[:generate]  = true                            }
  opts.on('-z',      '--gzip',        String,      "Gzip the asset files.")                                           {    options[:gzip]      = true                            }
  
  opts.parse!(ARGV) rescue return false
end

if (options[:generate])
  blender = FrontEndArchitect::Blender.new(options)
  blender.generate
else
  blender = FrontEndArchitect::Blender.new(options)
  blender.blend
end
